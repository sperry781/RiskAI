
import java.util.Arrays;
import java.util.LinkedList; 
import java.util.Queue;
import java.util.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Comparator;



public class Board{
	//Where the global list of players is stored
	public Player[] playerList = new Player[4];
	//Where the list of all territories is stored
	public List<Territory> globalTerritories = new ArrayList<Territory>();
	//Where each randomized personality is stored
	public Personality[] personalityList = new Personality[4];
	//This is the amount gained from owning each continent
	public int[] continentGains = new int[6];
	
	public Board()
	{
		//Where the global list of players is intialized
		Player player1 = new Player(0);
		Player player2 = new Player(1);
		Player player3 = new Player(2);
		Player player4 = new Player(3);
		
		playerList[0] = player1;
		playerList[1] = player2;
		playerList[2] = player3;
		playerList[3] = player4;
		
		//This is the amount gained from owning each continent
		continentGains[0] = 5;
		continentGains[1] = 2;
		continentGains[2] = 5;
		continentGains[3] = 3;
		continentGains[4] = 7;
		continentGains[5] = 2;
		
		
		//Personalities are randomly generated by getting 3 randomized values and dividing them by their sum so that they all add up to 1.0
		Personality personality1 = new Personality(0.0,0.0,0.0);
		double val1 = Math.random();
		double val2 = Math.random();
		double val3 = Math.random();
		double sum = val1+val2+val3;
		val1=val1/sum;
		val2=val2/sum;
		val3=val3/sum;
		Personality personality2 = new Personality(val1,val2,val3);
		
		val1 = Math.random();
		val2 = Math.random();
		val3 = Math.random();
		sum = val1+val2+val3;
		val1=val1/sum;
		val2=val2/sum;
		val3=val3/sum;
		Personality personality3 = new Personality(val1,val2,val3);
		
		val1 = Math.random();
		val2 = Math.random();
		val3 = Math.random();
		sum = val1+val2+val3;
		val1=val1/sum;
		val2=val2/sum;
		val3=val3/sum;
		Personality personality4 = new Personality(val1,val2,val3);
		
		personalityList[0]=personality1;
		personalityList[1]=personality2;
		personalityList[2]=personality3;
		personalityList[3]=personality4;
		
		
		//This is the risk board, its simply a list of territories and connections
		Territory alaska = new Territory("Alaska", 0, 0);
		Territory northWestTerritory = new Territory("North West Territory", 1, 0);
		Territory greenland = new Territory("Greenland", 2, 0);
		Territory alberta = new Territory("Alberta", 3, 0);
		Territory ontario = new Territory("Ontario", 4, 0);
		Territory quebec = new Territory("Quebec", 5, 0);
		Territory westernUnitedStates = new Territory("Western United States", 6, 0);
		Territory easternUnitedStates = new Territory("Eastern United States", 7, 0);
		Territory centralAmerica = new Territory("Central America", 8, 0);
		Territory venezuela = new Territory("Venezuela", 9, 1);
		Territory brazil = new Territory("Brazil", 10, 1);
		Territory peru = new Territory("Peru", 11, 1);
		Territory argentina = new Territory("Argentina", 12, 1);
		Territory iceland = new Territory("Iceland", 13, 2);
		Territory scandinavia = new Territory("Scandinavia", 14, 2);
		Territory ukraine = new Territory("Ukraine", 15, 2);
		Territory greatBritain = new Territory("Great Britain", 16, 2);
		Territory northernEurope = new Territory("Northern Europe", 17, 2);
		Territory westernEurope = new Territory("Western Europe", 18, 2);
		Territory southernEurope = new Territory("Southern Europe", 19, 2);
		Territory northAfrica = new Territory("North Africa", 20, 3);
		Territory egypt = new Territory("Egypt", 21, 3);
		Territory eastAfrica = new Territory("East Africa", 22, 3);
		Territory congo = new Territory("Congo", 23, 3);
		Territory southAfrica = new Territory("South Africa", 24, 3);
		Territory madagascar = new Territory("Madagascar", 25, 3);
		Territory ural = new Territory("Ural", 26, 4);
		Territory siberia = new Territory("Siberia", 27, 4);
		Territory yakutsk = new Territory("Yakutsk", 28, 4);
		Territory kamchatka = new Territory("Kamchatka", 29, 4);
		Territory irkutsk = new Territory("Irkutsk", 30, 4);
		Territory afghanistan = new Territory("Afghanistan", 31, 4);
		Territory mongolia = new Territory("Mongolia", 32, 4);
		Territory japan = new Territory("Japan", 33, 4);
		Territory china = new Territory("China", 34, 4);
		Territory middleEast = new Territory("Middle East", 35, 4);
		Territory india = new Territory("India", 36, 4);
		Territory siam = new Territory("Siam", 37, 4);
		Territory indonesia = new Territory("Indonesia", 38, 5);
		Territory newGuinea = new Territory("New Guinea", 39, 5);
		Territory westernAustralia = new Territory("Western Australia", 40, 5);
		Territory easternAustralia = new Territory("Eastern Australia", 41, 5);
		
		alaska.addConnectedCountry(kamchatka);
		alaska.addConnectedCountry(northWestTerritory);
		alaska.addConnectedCountry(alberta);
		
		northWestTerritory.addConnectedCountry(alaska);
		northWestTerritory.addConnectedCountry(alberta);
		northWestTerritory.addConnectedCountry(greenland);
		northWestTerritory.addConnectedCountry(ontario);
		
		greenland.addConnectedCountry(northWestTerritory);
		greenland.addConnectedCountry(ontario);
		greenland.addConnectedCountry(quebec);
		greenland.addConnectedCountry(iceland);
		
		alberta.addConnectedCountry(alaska);
		alberta.addConnectedCountry(northWestTerritory);
		alberta.addConnectedCountry(ontario);
		alberta.addConnectedCountry(westernUnitedStates);
		
		ontario.addConnectedCountry(greenland);
		ontario.addConnectedCountry(northWestTerritory);
		ontario.addConnectedCountry(alberta);
		ontario.addConnectedCountry(quebec);
		ontario.addConnectedCountry(easternUnitedStates);
		ontario.addConnectedCountry(westernUnitedStates);

		quebec.addConnectedCountry(greenland);
		quebec.addConnectedCountry(ontario);
		quebec.addConnectedCountry(easternUnitedStates);
		
		westernUnitedStates.addConnectedCountry(alberta);
		westernUnitedStates.addConnectedCountry(ontario);
		westernUnitedStates.addConnectedCountry(easternUnitedStates);
		westernUnitedStates.addConnectedCountry(centralAmerica);
		
		easternUnitedStates.addConnectedCountry(ontario);
		easternUnitedStates.addConnectedCountry(quebec);
		easternUnitedStates.addConnectedCountry(westernUnitedStates);
		easternUnitedStates.addConnectedCountry(centralAmerica);
		
		centralAmerica.addConnectedCountry(westernUnitedStates);
		centralAmerica.addConnectedCountry(easternUnitedStates);
		centralAmerica.addConnectedCountry(venezuela);
		
		venezuela.addConnectedCountry(centralAmerica);
		venezuela.addConnectedCountry(brazil);
		venezuela.addConnectedCountry(peru);
		
		peru.addConnectedCountry(venezuela);
		peru.addConnectedCountry(brazil);
		peru.addConnectedCountry(argentina);
		
		brazil.addConnectedCountry(venezuela);
		brazil.addConnectedCountry(peru);
		brazil.addConnectedCountry(argentina);
		brazil.addConnectedCountry(northAfrica);
		
		argentina.addConnectedCountry(peru);
		argentina.addConnectedCountry(brazil);
		
		iceland.addConnectedCountry(greenland);
		iceland.addConnectedCountry(scandinavia);
		iceland.addConnectedCountry(greatBritain);
		
		scandinavia.addConnectedCountry(iceland);
		scandinavia.addConnectedCountry(ukraine);
		scandinavia.addConnectedCountry(northernEurope);
		scandinavia.addConnectedCountry(greatBritain);

		ukraine.addConnectedCountry(scandinavia);
		ukraine.addConnectedCountry(northernEurope);
		ukraine.addConnectedCountry(southernEurope);
		ukraine.addConnectedCountry(middleEast);
		ukraine.addConnectedCountry(ural);
		ukraine.addConnectedCountry(afghanistan);
		
		greatBritain.addConnectedCountry(iceland);
		greatBritain.addConnectedCountry(scandinavia);
		greatBritain.addConnectedCountry(northernEurope);
		greatBritain.addConnectedCountry(westernEurope);
		
		northernEurope.addConnectedCountry(scandinavia);
		northernEurope.addConnectedCountry(ukraine);
		northernEurope.addConnectedCountry(greatBritain);
		northernEurope.addConnectedCountry(westernEurope);
		northernEurope.addConnectedCountry(southernEurope);
		
		westernEurope.addConnectedCountry(northernEurope);
		westernEurope.addConnectedCountry(southernEurope);
		westernEurope.addConnectedCountry(greatBritain);
		
		southernEurope.addConnectedCountry(westernEurope);
		southernEurope.addConnectedCountry(northernEurope);
		southernEurope.addConnectedCountry(ukraine);
		southernEurope.addConnectedCountry(middleEast);
		southernEurope.addConnectedCountry(egypt);
		southernEurope.addConnectedCountry(northAfrica);
		
		northAfrica.addConnectedCountry(westernEurope);
		northAfrica.addConnectedCountry(southernEurope);
		northAfrica.addConnectedCountry(egypt);
		northAfrica.addConnectedCountry(eastAfrica);
		northAfrica.addConnectedCountry(congo);
		northAfrica.addConnectedCountry(brazil);
		
		egypt.addConnectedCountry(northAfrica);
		egypt.addConnectedCountry(southernEurope);
		egypt.addConnectedCountry(middleEast);
		egypt.addConnectedCountry(eastAfrica);
		
		eastAfrica.addConnectedCountry(egypt);
		eastAfrica.addConnectedCountry(middleEast);
		eastAfrica.addConnectedCountry(northAfrica);
		eastAfrica.addConnectedCountry(congo);
		eastAfrica.addConnectedCountry(southAfrica);
		eastAfrica.addConnectedCountry(madagascar);
		
		congo.addConnectedCountry(eastAfrica);
		congo.addConnectedCountry(northAfrica);
		congo.addConnectedCountry(southAfrica);
		
		southAfrica.addConnectedCountry(congo);
		southAfrica.addConnectedCountry(eastAfrica);
		southAfrica.addConnectedCountry(northAfrica);
		
		madagascar.addConnectedCountry(eastAfrica);
		madagascar.addConnectedCountry(southAfrica);
		
		ural.addConnectedCountry(ukraine);
		ural.addConnectedCountry(afghanistan);
		ural.addConnectedCountry(siberia);
		ural.addConnectedCountry(china);
		
		siberia.addConnectedCountry(ural);
		siberia.addConnectedCountry(yakutsk);
		siberia.addConnectedCountry(irkutsk);
		siberia.addConnectedCountry(mongolia);
		siberia.addConnectedCountry(china);
		
		yakutsk.addConnectedCountry(siberia);
		yakutsk.addConnectedCountry(irkutsk);
		yakutsk.addConnectedCountry(kamchatka);
		
		kamchatka.addConnectedCountry(yakutsk);
		kamchatka.addConnectedCountry(alaska);
		kamchatka.addConnectedCountry(irkutsk);
		kamchatka.addConnectedCountry(mongolia);
		kamchatka.addConnectedCountry(japan);
		
		irkutsk.addConnectedCountry(siberia);
		irkutsk.addConnectedCountry(yakutsk);
		irkutsk.addConnectedCountry(kamchatka);
		irkutsk.addConnectedCountry(mongolia);
		
		afghanistan.addConnectedCountry(ukraine);
		afghanistan.addConnectedCountry(ural);
		afghanistan.addConnectedCountry(china);
		afghanistan.addConnectedCountry(india);
		afghanistan.addConnectedCountry(middleEast);
		
		mongolia.addConnectedCountry(china);
		mongolia.addConnectedCountry(japan);
		mongolia.addConnectedCountry(kamchatka);
		mongolia.addConnectedCountry(irkutsk);
		mongolia.addConnectedCountry(siberia);
		
		japan.addConnectedCountry(mongolia);
		japan.addConnectedCountry(kamchatka);
		
		china.addConnectedCountry(mongolia);
		china.addConnectedCountry(siberia);
		china.addConnectedCountry(ural);
		china.addConnectedCountry(afghanistan);
		china.addConnectedCountry(india);
		china.addConnectedCountry(siam);
		
		middleEast.addConnectedCountry(india);
		middleEast.addConnectedCountry(afghanistan);
		middleEast.addConnectedCountry(ukraine);
		middleEast.addConnectedCountry(southernEurope);
		middleEast.addConnectedCountry(egypt);
		middleEast.addConnectedCountry(eastAfrica);
		
		india.addConnectedCountry(middleEast);
		india.addConnectedCountry(afghanistan);
		india.addConnectedCountry(china);
		india.addConnectedCountry(siam);
		
		siam.addConnectedCountry(china);
		siam.addConnectedCountry(india);
		siam.addConnectedCountry(indonesia);
		
		indonesia.addConnectedCountry(siam);
		indonesia.addConnectedCountry(newGuinea);
		indonesia.addConnectedCountry(westernAustralia);
		
		newGuinea.addConnectedCountry(indonesia);
		newGuinea.addConnectedCountry(westernAustralia);
		newGuinea.addConnectedCountry(easternAustralia);
		
		westernAustralia.addConnectedCountry(easternAustralia);
		westernAustralia.addConnectedCountry(indonesia);
		westernAustralia.addConnectedCountry(newGuinea);
		
		easternAustralia.addConnectedCountry(westernAustralia);
		easternAustralia.addConnectedCountry(newGuinea);
		
		globalTerritories.add(alaska);
		globalTerritories.add(northWestTerritory);
		globalTerritories.add(greenland);
		globalTerritories.add(alberta);
		globalTerritories.add(ontario);
		globalTerritories.add(quebec);
		globalTerritories.add(westernUnitedStates);
		globalTerritories.add(easternUnitedStates);
		globalTerritories.add(centralAmerica);
		globalTerritories.add(venezuela);
		globalTerritories.add(brazil);
		globalTerritories.add(peru);
		globalTerritories.add(argentina);
		globalTerritories.add(iceland);
		globalTerritories.add(scandinavia);
		globalTerritories.add(ukraine);
		globalTerritories.add(greatBritain);
		globalTerritories.add(northernEurope);
		globalTerritories.add(westernEurope);
		globalTerritories.add(southernEurope);
		globalTerritories.add(northAfrica);
		globalTerritories.add(egypt);
		globalTerritories.add(eastAfrica);
		globalTerritories.add(congo);
		globalTerritories.add(southAfrica);
		globalTerritories.add(madagascar);
		globalTerritories.add(ural);
		globalTerritories.add(siberia);
		globalTerritories.add(yakutsk);
		globalTerritories.add(kamchatka);
		globalTerritories.add(irkutsk);
		globalTerritories.add(afghanistan);
		globalTerritories.add(mongolia);
		globalTerritories.add(japan);
		globalTerritories.add(china);
		globalTerritories.add(middleEast);
		globalTerritories.add(india);
		globalTerritories.add(siam);
		globalTerritories.add(indonesia);
		globalTerritories.add(newGuinea);
		globalTerritories.add(westernAustralia);
		globalTerritories.add(easternAustralia);
		
		
		System.out.println("This version of Risk has 4 players: you and 3 AI's. There are no reinforcement cards and instead of rolling for battles you sacrifice 1 army per defending army. Therefore you must have at least 2 more armies to take over a neighbor but can still attack with up to all of them minus 1 although tiebreaks go to defender. There is a add troops phase and an attack phase. During the attack phase you choose a territory to attack, one to attack from and the amount of troops to attack with. You may keep momentum and attack from a territory you just conquered. Otherwise, the normal rules of risk apply.\n");
		System.out.println("Before beginning the game you will recieve your territories and 30 armies, each territory will automatically be allotted 1 army and you will be able to place the remaining wherever you would like.\n");
		
		//randomize a list of 42 numbers, the first 10 will be p1, next 10 p2, next 11 p3, next 11 p4
		List<Integer> randomizer = new ArrayList<>();
		for (int i=0; i<42; i++) {
			randomizer.add(i);
		}
		
		Collections.shuffle(randomizer);
		
		for (int i=0; i<10; i++) {
			globalTerritories.get(randomizer.get(i)).setOwner(0);
			globalTerritories.get(randomizer.get(i)).setArmies(1);
			player1.addTerritory(globalTerritories.get(randomizer.get(i)));
		}
		
		for (int i=10; i<20; i++) {
			globalTerritories.get(randomizer.get(i)).setOwner(1);
			globalTerritories.get(randomizer.get(i)).setArmies(1);
			player2.addTerritory(globalTerritories.get(randomizer.get(i)));
		}
		
		for (int i=20; i<31; i++) {
			globalTerritories.get(randomizer.get(i)).setOwner(2);
			globalTerritories.get(randomizer.get(i)).setArmies(1);
			player3.addTerritory(globalTerritories.get(randomizer.get(i)));
		}
		
		for (int i=31; i<42; i++) {
			globalTerritories.get(randomizer.get(i)).setOwner(3);
			globalTerritories.get(randomizer.get(i)).setArmies(1);
			player4.addTerritory(globalTerritories.get(randomizer.get(i)));
		}
		
		
		//Show the territories owned by each player and their armies
		System.out.println("Player 1 has \n");
		System.out.println(player1.territoryList());
		
		System.out.println("Player 2 has \n");
		System.out.println(player2.territoryList());
		
		System.out.println("Player 3 has \n");
		System.out.println(player3.territoryList());
		
		System.out.println("Player 4 has \n");
		System.out.println(player4.territoryList());
		
		
		//begin game
		try {
			startPhase();
		}
		catch(IOException e) {
			e.printStackTrace();
		}
		
	}
	public void startPhase() throws IOException {
		int startingArmies=20;
		int desiredArmies=0;
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); 
		String input = "";
		String newInput = "";
		boolean loop = true;
		boolean newLoop = true;
		StringBuilder startString = new StringBuilder();
		
		//This loop gets input from the player to decide the amount of armies placed and where to place them, this repeats until no armies are left
		while(loop) {
			startString = new StringBuilder();
			startString.append("You are Player 1 and have ");
			startString.append(String.format("%2d ", startingArmies));
			startString.append("armies, how many would you like to place?");
			System.out.println(startString);
			System.out.flush();
			input = in.readLine();
			desiredArmies=Integer.parseInt(input);
			if (desiredArmies<=startingArmies)
			{
				startingArmies=startingArmies-desiredArmies;
			}
			else
			{
				System.out.println("Improper input, try again");
			}
			newLoop=true;
			//determine which country to place armies and make sure the player owns it
			while(newLoop) {
				startString = new StringBuilder();
				startString.append("Where would you like to place the ");
				startString.append(String.format("%2d ", desiredArmies));
				startString.append("armies?");
				System.out.println(startString);
				System.out.flush();
				newInput = in.readLine();
				if (playerList[0].doesPlayerHaveTerritory(newInput))
				{
					playerList[0].getTerritory(newInput).setArmies(playerList[0].getTerritory(newInput).getArmies()+desiredArmies);
					newLoop=false;
				}
				else
				{
					System.out.println("Improper input, try again");
				}
			}
			if(startingArmies==0)
				loop=false;
		}
		
		int armyAi1 = 20;
		int armyAi2 = 19;
		int armyAi3 = 19;
		//This is where the AI places their initial armies. The proportion of armies placed for defense is directly related to their defense score, the same goes for aggression and conquest
		//Since this is the beginning phase I have left out diplomacy and replaced its' allocated placements with conquest placements
		
		for(int i = 0; i<20*personalityList[1].getAggression()&&armyAi1!=0; i++)
		{
			placeForConquest(playerList[1]);
			armyAi1--;
		}
		
		for(int i = 0; i<20*personalityList[1].getDefensive()&&armyAi1!=0; i++)
		{
			placeForDefense(playerList[1]);
			armyAi1--;
		}
		
		for(int i = 0; i<armyAi1; i++)
		{
			placeForConquest(playerList[1]);
		}
		
		for(int i = 0; i<19*personalityList[2].getAggression()&&armyAi2!=0; i++)
		{
			placeForConquest(playerList[2]);
			armyAi2--;
		}
		
		for(int i = 0; i<19*personalityList[2].getDefensive()&&armyAi2!=0; i++)
		{
			placeForDefense(playerList[2]);
			armyAi2--;
		}
		
		for(int i = 0; i<armyAi2; i++)
		{
			placeForConquest(playerList[2]);
		}
		
		for(int i = 0; i<19*personalityList[3].getAggression()&&armyAi3!=0; i++)
		{
			placeForConquest(playerList[3]);
			armyAi3--;
		}
		
		for(int i = 0; i<19*personalityList[3].getDefensive()&&armyAi3!=0; i++)
		{
			placeForDefense(playerList[3]);
			armyAi3--;
		}
		
		for(int i = 0; i<armyAi3; i++)
		{
			placeForConquest(playerList[3]);
		}
		

		int gainedArmies;
		loop=true;
		
		//This loop is where the rest of the game is ran after the beginning deployment phase, it replays the phases and runs the ai's turns until the player loses or no territories are left
		while(loop) {
			//Start with the deployment phase
			System.out.println("Player 1 has \n");
			System.out.println(playerList[0].territoryList());
		
			System.out.println("Player 2 has \n");
			System.out.println(playerList[1].territoryList());
		
			System.out.println("Player 3 has \n");
			System.out.println(playerList[2].territoryList());
		
			System.out.println("Player 4 has \n");
			System.out.println(playerList[3].territoryList());
			
			//Calculate the amount of armies gained based off continent domination and territory count
			gainedArmies=calculateGainedArmies(playerList[0]);
			
			startString = new StringBuilder();
			startString.append("You are Player 1 and have ");
			startString.append(String.format("%2d ", gainedArmies));
			startString.append("armies, how many would you like to place?");
			System.out.println(startString);
			System.out.flush();
			input = in.readLine();
			desiredArmies=Integer.parseInt(input);
			if (desiredArmies<=gainedArmies)
			{
				gainedArmies=gainedArmies-desiredArmies;
			}
			else
			{
				System.out.println("Improper input, try again");
			}
			newLoop=true;
			
			//Once the desired amount for placement is found, find the territory to place it in and make sure they own it
			while(newLoop) {
				startString = new StringBuilder();
				startString.append("Where would you like to place the ");
				startString.append(String.format("%2d ", desiredArmies));
				startString.append("armies?");
				System.out.println(startString);
				System.out.flush();
				newInput = in.readLine();
				if (playerList[0].doesPlayerHaveTerritory(newInput))
				{
					playerList[0].getTerritory(newInput).setArmies(playerList[0].getTerritory(newInput).getArmies()+desiredArmies);
					newLoop=false;
				}
				else
				{
					System.out.println("Improper input, try again");
				}
			}
			//Run the attack phase which possibly might be exited immediately and then run the AI turns before repeating the deployment phase again
			if(gainedArmies==0)
			{
				runAttackPhase();
				runAI();
			}

		}
		
		
		
	}
	
	public void runAttackPhase() throws IOException
	{
		Territory attackingTerritory;
		Territory defendingTerritory;
		
		String input = "";
		String newInput = "";
		String input3 = "";
		String input4 = "";
		boolean loop = true;
		boolean newLoop = true;
		boolean loop3 = true;
		boolean loop4 = true;
		
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in)); 
		StringBuilder startString = new StringBuilder();
		
		int desiredAttackingArmies=0;
		
		System.out.println("Player 1 has \n");
		System.out.println(playerList[0].territoryList());
	
		System.out.println("Player 2 has \n");
		System.out.println(playerList[1].territoryList());
		
		System.out.println("Player 3 has \n");
		System.out.println(playerList[2].territoryList());
		
		System.out.println("Player 4 has \n");
		System.out.println(playerList[3].territoryList());
		
		startString = new StringBuilder();
		startString.append("Would you like to attack? Type y or n.");
		System.out.println(startString);
		System.out.flush();
		input = in.readLine();
		//If the player does not want to attack then exit
		if (input.equals("n"))
		{
			return;
		}
		else if(input.equals("y"))
		{
			newLoop=true;
			//Find attacking territory, loop returns to here after an attack is complete
			while(newLoop) {
				startString = new StringBuilder();
				startString.append("Which territory would you like to attack from? Type None if you are done attacking.");
				System.out.println(startString);
				System.out.flush();
				newInput = in.readLine();
				//exit attack phase
				if (newInput.equals("None"))
				{
					return;
				}
				
				else if (playerList[0].doesPlayerHaveTerritory(newInput)&&playerList[0].getTerritory(newInput).getArmies()>1)
				{
					attackingTerritory=playerList[0].getTerritory(newInput);
					loop3=true;
					//Find defending territory
					while(loop3) {
						startString = new StringBuilder();
						startString.append("Which territory would you like to attack? Type None if you are done attacking.");
						System.out.println(startString);
						System.out.flush();
						input3 = in.readLine();
						if (input3.equals("None"))
						{
							return;
						}
						
						else if (attackingTerritory.getConnected().contains(getTerritory(input3)))
						{
							defendingTerritory=getTerritory(input3);
							loop4=true;
							//Find army count
							while(loop4) {
								startString = new StringBuilder();
								startString.append("How many armies would you like to attack with(Max of current armies minus 1)? Type None if you are done attacking.");
								System.out.println(startString);
								System.out.flush();
								input4 = in.readLine();
								if (input4.equals("None"))
								{
									return;
								}	
								desiredAttackingArmies=Integer.parseInt(input4);
								if (desiredAttackingArmies<attackingTerritory.getArmies())
								{
									//Run attack in a seperate method, this is also used for moving between territories
									runAttack(attackingTerritory, defendingTerritory, desiredAttackingArmies);
									System.out.println("Player 1 has \n");
									System.out.println(playerList[0].territoryList());
									System.out.println("Player 2 has \n");
									System.out.println(playerList[1].territoryList());
									System.out.println("Player 3 has \n");
									System.out.println(playerList[2].territoryList());
									System.out.println("Player 4 has \n");
									System.out.println(playerList[3].territoryList());
									loop4=false;
									loop3=false;
								}
								else
								{
									System.out.println("Improper input, try again");
								}	
							}
							
						}
						else
						{
							System.out.println("Improper input, try again");
						}
					}
				}
				else
				{
					System.out.println("Improper input, try again");
				}
			}
		}
		else
		{
			System.out.println("Improper input, try again");
		}
	}
	
	public void runAI()
	{
		//This is where each AI runs the two phases
		if(!playerList[1].getTerritories().isEmpty())
		{
			runAIPlacement(playerList[1]);
			runAIAttack(playerList[1]);
		}
		if(!playerList[2].getTerritories().isEmpty())
		{
			runAIPlacement(playerList[2]);
			runAIAttack(playerList[2]);
		}
		if(!playerList[3].getTerritories().isEmpty())
		{
			runAIPlacement(playerList[3]);
			runAIAttack(playerList[3]);
		}
	}
	
	public void runAIPlacement(Player ai)
	{
		int newArmies = calculateGainedArmies(ai);
		
		
		//Personality scores for each AI is directly proportional to the amount of armies they devote to each goal
		
		//Aggression determines armies placed near desired conquest
		for(int i = 0; i<newArmies*personalityList[ai.getId()].getAggression()&&newArmies!=0; i++)
		{
			placeForConquest(ai);
			newArmies--;
		}
		
		//Defense score determines armies placed in weak important territories
		for(int i = 0; i<newArmies*personalityList[ai.getId()].getDefensive()&&newArmies!=0; i++)
		{
			placeForDefense(ai);
			newArmies--;
		}
		
		//Diplomacy score determines armies placed to stifle warmonger, unless the player is the top warmonger in which case just go all in and place them for conquest
		for(int i = 0; i<newArmies; i++)
		{
			if(worstWarmonger()==ai.getId())
				placeForConquest(ai);
			else
				placeForWarmonger(ai);
		}
	}
	
	//This is the worst global warmonger and does not take into account personal relationships between players
	public int worstWarmonger()
	{
		int highest = 0;
		for(int i = 0; i<4; i++)
		{
			if(playerList[i].getWarmongerScore()>playerList[highest].getWarmongerScore())
				highest=i;
		}
		return highest;
	}
	
	
	
	public void runAIAttack(Player ai)
	{

		boolean loop = true;
		//this value for attacker actually does not matter for either loop and will be updated later, I just needed to initialize something to compile
		Territory attacker = ai.mostThreatenedTerritory();
		//Conquest phase
		while(loop)
		{
			//Find territory to stage the next desired conquest
			for(Territory i : ai.nextDesiredConquest().getConnected())
			{
				if(ai.getId()==i.getOwner())
					attacker=i;
			}
			//If the next desired conquest can be taken, take it
			if(ai.nextDesiredConquest().getArmies()+2<attacker.getArmies())
			{
				runAttack(attacker, ai.nextDesiredConquest(), attacker.getArmies()-1);
			}
			//If it can't be taken then wait
			else
				loop = false;
		}
		loop = true;
		boolean canAttack=false;
		//Warmonger stifling phase, notably this runs regardless of diplomacy score so if any AI gets the chance to attack their most hated player's most threatened territory they will
		while(loop)
		{
			//Find the most threatened territory of their most hated player
			for(Territory i : playerList[findMostHated(ai)].mostThreatenedTerritory().getConnected())
			{
				if(ai.getId()==i.getOwner())
				{
					attacker=i;
					canAttack=true;
				}
			}
			//If they can attack the most threatened territory and win then do it
			if(playerList[findMostHated(ai)].mostThreatenedTerritory().getArmies()+2<attacker.getArmies()&&canAttack)
			{
				runAttack(attacker, playerList[findMostHated(ai)].mostThreatenedTerritory(), attacker.getArmies()-1);
			}
			else
				loop = false;
		}
	}
	
	public void runAttack(Territory attacker, Territory defender, int amount)
	{
		//owned by same player
		if(defender.getOwner()==attacker.getOwner())
		{
			attacker.setArmies(attacker.getArmies()-amount);
			defender.setArmies(defender.getArmies()+amount);
		}
		//tie
		else if(defender.getArmies()==amount)
		{
			attacker.setArmies(attacker.getArmies()-amount);
			defender.setArmies(1);
		}
		//defender wins
		else if(defender.getArmies()>amount)
		{
			attacker.setArmies(attacker.getArmies()-amount);
			defender.setArmies(defender.getArmies()-amount);
		}
		//attacker wins
		else if(defender.getArmies()<amount)
		{
			playerList[defender.getOwner()].setGrievances(attacker.getOwner(),playerList[defender.getOwner()].getGrievances(attacker.getOwner())+.1);
			attacker.setArmies(attacker.getArmies()-amount);
			defender.setArmies(Math.abs(defender.getArmies()-amount));
			playerList[defender.getOwner()].removeTerritory(defender);
			defender.setOwner(attacker.getOwner());
			playerList[attacker.getOwner()].addTerritory(defender);
			System.out.println(defender.getName()+" has been taken.");
		}
		
	}
	
	//Finds territory by string of name
	public Territory getTerritory(String tName)
	{
		for(Territory i : globalTerritories)
		{
			if(i.getName().equals(tName))
				return i;
		}
		return new Territory("error", 100, 100);
	}
	
	//Calculates gained armies according to risk rules: territories owned/3 + continent gains with a minimum of 2
	public int calculateGainedArmies(Player desiredPlayer)
	{
		desiredPlayer.calculateContinentPercentage();
		int totalTerritories=0;
		int totalGain=0;
		for(int i = 0; i<6; i++)
		{
			totalTerritories+=desiredPlayer.getContinentCount(i);
			//if player owns 100% of continent award extra armies
			if(desiredPlayer.getPercentage(i)==1.0)
			{
				totalGain+=continentGains[i];
			}
		}
		totalGain+=Math.floor(totalTerritories/3);
		if(totalGain<2)
			totalGain=2;
		return totalGain;
	}
	
	//Place a single army at the desired conquest stage
	public void placeForConquest(Player desiredPlayer)
	{
		for(Territory i : desiredPlayer.nextDesiredConquest().getConnected())
		{
			if(i.getOwner()==desiredPlayer.getId())
			{
				i.setArmies(i.getArmies()+1);
				return;
			}
		}
		
	}
	
	//Place an army near the warmonger, either at their most threatened territory or just a bordering one
	public void placeForWarmonger(Player desiredPlayer)
	{
		List<Territory> visited = new ArrayList<Territory>();
		Player mostHated = playerList[findMostHated(desiredPlayer)];
		//doesn't affect code
		Territory temp = desiredPlayer.mostThreatenedTerritory();
		for(Territory i : desiredPlayer.getTerritories())
		{
			for(Territory j : i.getConnected())
			{
				if(!visited.contains(j))
				{
					if(j.getId()==mostHated.mostThreatenedTerritory().getId())
					{
						i.setArmies(i.getArmies()+1);
						return;
					}
					else if(j.getOwner()==mostHated.getId())
						temp=i;
					visited.add(j);
					
				}
			}
		}
		temp.setArmies(temp.getArmies()+1);
		
	}
	
	//Use weighted warmonger score to determine this players most hated player
	public int findMostHated(Player ai)
	{
		int highest = 0;
		for(int i = 0; i<4; i++)
		{
			if(ai.getWeightedWarmongerScore(i,playerList[i].getWarmongerScore(),playerList[i].calculateArmyCount())>ai.getWeightedWarmongerScore(highest,playerList[highest].getWarmongerScore(),playerList[highest].calculateArmyCount()))	
			{
				if(highest!=ai.getId())
				{
					highest=i;
				}
			}
		}
		return highest;
	}
	
	//Place a single army in the players most threatened territory
	public void placeForDefense(Player desiredPlayer)
	{
		desiredPlayer.mostThreatenedTerritory().setArmies(desiredPlayer.mostThreatenedTerritory().getArmies()+1);
	}
	
	
	public static void main(String[] args) throws IOException {
		
		System.out.println("This is an application to simulate the moves of an AI in a modified version of Risk with a random personality that influences their decisions. This current version does not provide a visual for the board and requires that you have you own in front of you to follow along with the moves.");
		Board newBoard = new Board();
		
	}
}